# Generated by Django 5.2.1 on 2025-06-07 17:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '__first__'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StatutEtudiant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nom', models.CharField(max_length=50, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('actif', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'statuts_etudiant',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type_utilisateur', models.CharField(choices=[('etudiant', 'Étudiant'), ('enseignant', 'Enseignant'), ('admin', 'Administrateur'), ('scolarite', 'Service Scolarité'), ('direction', 'Direction')], max_length=15)),
                ('matricule', models.CharField(max_length=20, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('adresse', models.TextField(blank=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('lieu_naissance', models.CharField(blank=True, max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('actif', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='acadflow_user_set', related_query_name='acadflow_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='acadflow_user_set', related_query_name='acadflow_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grade', models.CharField(choices=[('assistant', 'Assistant'), ('maitre_assistant', 'Maître Assistant'), ('maitre_conference', 'Maître de Conférences'), ('professeur', 'Professeur')], max_length=20)),
                ('specialite', models.CharField(max_length=200)),
                ('statut', models.CharField(max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'enseignants',
            },
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('numero_carte', models.CharField(blank=True, max_length=20, unique=True)),
                ('statut_current', models.CharField(default='inscrit', max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'etudiants',
            },
        ),
        migrations.CreateModel(
            name='HistoriqueStatut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date_changement', models.DateTimeField(auto_now_add=True)),
                ('motif', models.TextField(blank=True)),
                ('annee_academique', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.anneeacademique')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.etudiant')),
                ('statut', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.statutetudiant')),
            ],
            options={
                'db_table': 'historique_statuts',
                'ordering': ['-date_changement'],
            },
        ),
        migrations.CreateModel(
            name='Inscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date_inscription', models.DateField(auto_now_add=True)),
                ('nombre_redoublements', models.PositiveIntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('annee_academique', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.anneeacademique')),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.classe')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.etudiant')),
                ('statut', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.statutetudiant')),
            ],
            options={
                'db_table': 'inscriptions',
                'unique_together': {('etudiant', 'annee_academique', 'active')},
            },
        ),
    ]
