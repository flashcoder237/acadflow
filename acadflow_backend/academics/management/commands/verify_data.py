# academics/management/commands/verify_data.py
import os
import django
from django.core.management.base import BaseCommand
from django.db.models import Count, Avg, Sum
from django.db import models

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'acadflow_backend.settings')
django.setup()

from core.models import Domaine, Filiere, Niveau
from academics.models import AnneeAcademique, Classe, UE, EC, ConfigurationEvaluationEC
from users.models import User, Enseignant, Etudiant, Inscription
from evaluations.models import Enseignement, Evaluation, Note, MoyenneEC, MoyenneUE, MoyenneSemestre

class Command(BaseCommand):
    help = 'V√©rifie l\'int√©grit√© des donn√©es cr√©√©es'
    
    def handle(self, *args, **options):
        self.stdout.write('üîç V√©rification des donn√©es cr√©√©es...\n')
        
        # V√©rifications des donn√©es de base
        self.verify_basic_data()
        
        # V√©rifications des utilisateurs
        self.verify_users()
        
        # V√©rifications acad√©miques
        self.verify_academic_data()
        
        # V√©rifications des √©valuations
        self.verify_evaluations()
        
        # Statistiques g√©n√©rales
        self.show_statistics()
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ V√©rification termin√©e!')
        )
    
    def verify_basic_data(self):
        """V√©rifier les donn√©es de base"""
        self.stdout.write('üìö V√©rification des donn√©es de base:')
        
        # Domaines
        domaines_count = Domaine.objects.count()
        self.stdout.write(f'   ‚Ä¢ Domaines: {domaines_count}')
        
        # Fili√®res
        filieres_count = Filiere.objects.count()
        self.stdout.write(f'   ‚Ä¢ Fili√®res: {filieres_count}')
        
        # Niveaux
        niveaux_count = Niveau.objects.count()
        self.stdout.write(f'   ‚Ä¢ Niveaux: {niveaux_count}')
        
        # Ann√©es acad√©miques
        annees_count = AnneeAcademique.objects.count()
        annee_active = AnneeAcademique.objects.filter(active=True).first()
        self.stdout.write(f'   ‚Ä¢ Ann√©es acad√©miques: {annees_count}')
        self.stdout.write(f'   ‚Ä¢ Ann√©e active: {annee_active.libelle if annee_active else "Aucune"}')
        
        print()
    
    def verify_users(self):
        """V√©rifier les utilisateurs"""
        self.stdout.write('üë• V√©rification des utilisateurs:')
        
        # Utilisateurs par type
        for type_user, label in User.TYPES_UTILISATEUR:
            count = User.objects.filter(type_utilisateur=type_user).count()
            self.stdout.write(f'   ‚Ä¢ {label}: {count}')
        
        # Enseignants
        enseignants_count = Enseignant.objects.count()
        self.stdout.write(f'   ‚Ä¢ Profils enseignants: {enseignants_count}')
        
        # √âtudiants
        etudiants_count = Etudiant.objects.count()
        self.stdout.write(f'   ‚Ä¢ Profils √©tudiants: {etudiants_count}')
        
        # Inscriptions
        inscriptions_count = Inscription.objects.filter(active=True).count()
        self.stdout.write(f'   ‚Ä¢ Inscriptions actives: {inscriptions_count}')
        
        print()
    
    def verify_academic_data(self):
        """V√©rifier les donn√©es acad√©miques"""
        self.stdout.write('üè´ V√©rification des donn√©es acad√©miques:')
        
        # Classes
        classes_count = Classe.objects.filter(active=True).count()
        self.stdout.write(f'   ‚Ä¢ Classes actives: {classes_count}')
        
        # UE
        ues_count = UE.objects.filter(actif=True).count()
        self.stdout.write(f'   ‚Ä¢ UE actives: {ues_count}')
        
        # EC
        ecs_count = EC.objects.filter(actif=True).count()
        self.stdout.write(f'   ‚Ä¢ EC actifs: {ecs_count}')
        
        # Enseignements
        enseignements_count = Enseignement.objects.filter(actif=True).count()
        self.stdout.write(f'   ‚Ä¢ Enseignements: {enseignements_count}')
        
        # D√©tails par classe
        self.stdout.write('   ‚Ä¢ D√©tails par classe:')
        for classe in Classe.objects.filter(active=True):
            effectif = Inscription.objects.filter(classe=classe, active=True).count()
            self.stdout.write(f'     - {classe.nom}: {effectif} √©tudiants')
        
        print()
    
    def verify_evaluations(self):
        """V√©rifier les √©valuations et notes"""
        self.stdout.write('üìù V√©rification des √©valuations:')
        
        # √âvaluations
        evaluations_count = Evaluation.objects.count()
        evaluations_terminees = Evaluation.objects.filter(saisie_terminee=True).count()
        self.stdout.write(f'   ‚Ä¢ √âvaluations cr√©√©es: {evaluations_count}')
        self.stdout.write(f'   ‚Ä¢ √âvaluations termin√©es: {evaluations_terminees}')
        
        # Notes
        notes_count = Note.objects.count()
        notes_absents = Note.objects.filter(absent=True).count()
        self.stdout.write(f'   ‚Ä¢ Notes saisies: {notes_count}')
        self.stdout.write(f'   ‚Ä¢ Absences: {notes_absents}')
        
        # Moyennes
        moyennes_ec = MoyenneEC.objects.count()
        moyennes_ue = MoyenneUE.objects.count()
        moyennes_sem = MoyenneSemestre.objects.count()
        self.stdout.write(f'   ‚Ä¢ Moyennes EC: {moyennes_ec}')
        self.stdout.write(f'   ‚Ä¢ Moyennes UE: {moyennes_ue}')
        self.stdout.write(f'   ‚Ä¢ Moyennes Semestre: {moyennes_sem}')
        
        print()
    
    def show_statistics(self):
        """Afficher des statistiques d√©taill√©es"""
        self.stdout.write('üìä Statistiques d√©taill√©es:')
        
        # Moyennes g√©n√©rales
        if MoyenneSemestre.objects.exists():
            moyenne_generale = MoyenneSemestre.objects.aggregate(
                moyenne=Avg('moyenne_generale')
            )['moyenne']
            self.stdout.write(f'   ‚Ä¢ Moyenne g√©n√©rale: {moyenne_generale:.2f}/20')
        
        # R√©partition des notes
        if Note.objects.filter(absent=False).exists():
            notes = Note.objects.filter(absent=False)
            moyenne_notes = notes.aggregate(moyenne=Avg('note_obtenue'))['moyenne']
            note_max = notes.order_by('-note_obtenue').first().note_obtenue
            note_min = notes.order_by('note_obtenue').first().note_obtenue
            
            self.stdout.write(f'   ‚Ä¢ Moyenne des notes: {moyenne_notes:.2f}/20')
            self.stdout.write(f'   ‚Ä¢ Note maximale: {note_max}/20')
            self.stdout.write(f'   ‚Ä¢ Note minimale: {note_min}/20')
        
        # Taux de r√©ussite par classe
        self.stdout.write('   ‚Ä¢ Taux de r√©ussite par classe:')
        for classe in Classe.objects.filter(active=True):
            moyennes_classe = MoyenneSemestre.objects.filter(classe=classe)
            if moyennes_classe.exists():
                total = moyennes_classe.count()
                reussis = moyennes_classe.filter(moyenne_generale__gte=10).count()
                taux = (reussis / total) * 100 if total > 0 else 0
                self.stdout.write(f'     - {classe.nom}: {taux:.1f}% ({reussis}/{total})')
        
        # Enseignants les plus actifs
        self.stdout.write('   ‚Ä¢ Enseignants par nombre d\'enseignements:')
        enseignants_stats = Enseignant.objects.annotate(
            nb_enseignements=Count('enseignement')
        ).order_by('-nb_enseignements')
        
        for enseignant in enseignants_stats[:5]:
            self.stdout.write(
                f'     - {enseignant.user.get_full_name()}: '
                f'{enseignant.nb_enseignements} enseignements'
            )
        
        print()
    
    def check_data_integrity(self):
        """V√©rifier l'int√©grit√© des donn√©es"""
        self.stdout.write('üîç V√©rification de l\'int√©grit√© des donn√©es:')
        
        errors = []
        warnings = []
        
        # V√©rifier que chaque √©tudiant a des inscriptions
        etudiants_sans_inscription = Etudiant.objects.filter(
            inscription__isnull=True
        ).count()
        if etudiants_sans_inscription > 0:
            warnings.append(f'{etudiants_sans_inscription} √©tudiants sans inscription')
        
        # V√©rifier que chaque EC a une configuration d'√©valuation
        from academics.models import ConfigurationEvaluationEC
        ecs_sans_config = EC.objects.filter(
            configurationevaluationec__isnull=True
        ).count()
        if ecs_sans_config > 0:
            warnings.append(f'{ecs_sans_config} EC sans configuration d\'√©valuation')
        
        # V√©rifier les pourcentages d'√©valuation
        for ec in EC.objects.filter(actif=True):
            total_pourcentage = ConfigurationEvaluationEC.objects.filter(
                ec=ec
            ).aggregate(
                total=Sum('pourcentage')
            )['total'] or 0
            
            if total_pourcentage != 100:
                errors.append(
                    f'EC {ec.code}: pourcentage total = {total_pourcentage}% (‚â† 100%)'
                )
        
        # V√©rifier les ann√©es acad√©miques
        annees_actives = AnneeAcademique.objects.filter(active=True).count()
        if annees_actives != 1:
            errors.append(f'{annees_actives} ann√©es acad√©miques actives (doit √™tre 1)')
        
        # V√©rifier les notes sans √©valuation
        notes_orphelines = Note.objects.filter(evaluation__isnull=True).count()
        if notes_orphelines > 0:
            errors.append(f'{notes_orphelines} notes sans √©valuation associ√©e')
        
        # Afficher les r√©sultats
        if errors:
            self.stdout.write(self.style.ERROR('   ‚ùå Erreurs d√©tect√©es:'))
            for error in errors:
                self.stdout.write(f'     ‚Ä¢ {error}')
        
        if warnings:
            self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è Avertissements:'))
            for warning in warnings:
                self.stdout.write(f'     ‚Ä¢ {warning}')
        
        if not errors and not warnings:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Aucun probl√®me d√©tect√©'))
        
        print()
        
        return len(errors) == 0

# Pour ex√©cuter le script directement
if __name__ == '__main__':
    command = Command()
    command.handle()
    print("‚úÖ V√©rification termin√©e !")