# docs/setup_sphinx.py
"""
Configuration automatique de Sphinx pour AcadFlow
G√©n√®re une documentation HTML compl√®te avec navigation
"""

import os
import subprocess
import sys
from pathlib import Path

def setup_sphinx_docs():
    """Configure Sphinx pour la documentation"""
    print("üìö Configuration de Sphinx pour AcadFlow...")
    
    # Cr√©er le r√©pertoire docs
    docs_dir = Path('docs')
    docs_dir.mkdir(exist_ok=True)
    
    # Installer Sphinx si n√©cessaire
    try:
        import sphinx
        print("‚úÖ Sphinx d√©j√† install√©")
    except ImportError:
        print("üì¶ Installation de Sphinx...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'sphinx', 'sphinx-rtd-theme', 'sphinx-autodoc-typehints'])
    
    # Cr√©er la configuration Sphinx
    create_sphinx_config(docs_dir)
    
    # Cr√©er les fichiers de documentation
    create_sphinx_files(docs_dir)
    
    # Cr√©er le Makefile
    create_makefile(docs_dir)
    
    print("‚úÖ Configuration Sphinx termin√©e!")
    print(f"üìÇ Documentation dans : {docs_dir.absolute()}")
    print("üöÄ Pour construire : cd docs && make html")

def create_sphinx_config(docs_dir):
    """Cr√©e le fichier conf.py pour Sphinx"""
    conf_content = '''# Configuration file for the Sphinx documentation builder.
import os
import sys
import django

# Ajouter le projet au path
sys.path.insert(0, os.path.abspath('..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'acadflow_backend.settings')
django.setup()

# -- Project information -----------------------------------------------------
project = 'AcadFlow'
copyright = '2024, Facult√© de M√©decine'
author = '√âquipe AcadFlow'
release = '1.0'

# -- General configuration ---------------------------------------------------
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.ifconfig',
]

templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# -- Options for HTML output -------------------------------------------------
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']

# -- Extension configuration -------------------------------------------------
# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False

# Autodoc settings
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
    'special-members': '__init__',
    'undoc-members': True,
    'exclude-members': '__weakref__'
}

# Todo settings
todo_include_todos = True

# Intersphinx mapping
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'django': ('https://docs.djangoproject.com/en/stable/', 'https://docs.djangoproject.com/en/stable/_objects/'),
}
'''
    
    with open(docs_dir / 'conf.py', 'w', encoding='utf-8') as f:
        f.write(conf_content)
    print("   ‚úÖ conf.py cr√©√©")

def create_sphinx_files(docs_dir):
    """Cr√©e les fichiers RST pour la documentation"""
    
    # Index principal
    index_content = '''AcadFlow Documentation
======================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   installation
   quickstart
   api/index
   models/index
   development
   changelog

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
'''
    
    # Installation
    installation_content = '''Installation
============

Pr√©requis
---------

* Python 3.8+
* PostgreSQL 12+
* Git

Installation rapide
-------------------

.. code-block:: bash

   # Cloner le projet
   git clone <repo-url>
   cd acadflow_backend

   # Cr√©er un environnement virtuel
   python -m venv acadflow_env
   source acadflow_env/bin/activate  # Linux/Mac
   # ou
   acadflow_env\\Scripts\\activate  # Windows

   # Installer les d√©pendances
   pip install -r requirements.txt

   # Configuration de la base de donn√©es
   createdb acadflow_db
   python manage.py migrate

   # Initialiser les donn√©es de test
   python manage.py reset_medical_data --confirm

   # D√©marrer le serveur
   python manage.py runserver

Configuration
-------------

Base de donn√©es
~~~~~~~~~~~~~~~

Cr√©ez un fichier ``.env`` avec vos param√®tres :

.. code-block:: bash

   SECRET_KEY=your-secret-key
   DEBUG=True
   DB_NAME=acadflow_db
   DB_USER=postgres
   DB_PASSWORD=your-password
   DB_HOST=localhost
   DB_PORT=5432

V√©rification
~~~~~~~~~~~~

.. code-block:: bash

   python manage.py check
   python manage.py verify_data
'''
    
    # Guide de d√©marrage rapide
    quickstart_content = '''Guide de d√©marrage rapide
========================

Interface d'administration
---------------------------

1. Acc√©dez √† http://localhost:8000/admin/
2. Connectez-vous avec :
   
   * **Username:** admin
   * **Password:** admin123

3. Explorez les diff√©rentes sections :
   
   * **Core** : Domaines, Fili√®res, Niveaux
   * **Academics** : Classes, UE, EC
   * **Users** : Utilisateurs, √âtudiants, Enseignants
   * **Evaluations** : Notes, Moyennes

API REST
--------

Authentification
~~~~~~~~~~~~~~~~

.. code-block:: python

   import requests

   # Login
   response = requests.post('http://localhost:8000/api/auth/login/', {
       'username': 'admin',
       'password': 'admin123'
   })
   token = response.json()['token']

   # Headers pour les requ√™tes authentifi√©es
   headers = {'Authorization': f'Token {token}'}

Exemples d'utilisation
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   # Liste des classes
   classes = requests.get('http://localhost:8000/api/academics/classes/', headers=headers)

   # √âtudiants d'une classe
   etudiants = requests.get('http://localhost:8000/api/academics/classes/1/etudiants/', headers=headers)

   # Notes d'un √©tudiant
   notes = requests.get('http://localhost:8000/api/evaluations/notes/?etudiant=1', headers=headers)

Comptes de test
---------------

.. list-table:: Comptes disponibles
   :header-rows: 1

   * - Type
     - Username
     - Password
     - Description
   * - Admin
     - admin
     - admin123
     - Acc√®s complet
   * - Enseignant
     - ens001
     - ens123
     - Prof. Jean-Claude MBALLA
   * - √âtudiant
     - med0001
     - etud123
     - √âtudiant en L1
'''
    
    # Documentation de d√©veloppement
    development_content = '''Guide de d√©veloppement
=====================

Architecture
------------

AcadFlow suit l'architecture MVT (Model-View-Template) de Django avec une API REST.

Apps Django
~~~~~~~~~~~

.. list-table:: Applications
   :header-rows: 1

   * - App
     - Description
     - Mod√®les principaux
   * - core
     - Structure de base
     - Domaine, Filiere, Niveau
   * - academics
     - Gestion acad√©mique
     - Classe, UE, EC
   * - users
     - Utilisateurs
     - User, Etudiant, Enseignant
   * - evaluations
     - √âvaluations
     - Note, Evaluation, Moyenne

Conventions de code
-------------------

Models
~~~~~~

.. code-block:: python

   class MonModel(TimestampedModel):
       """Description du mod√®le"""
       nom = models.CharField(max_length=100)
       actif = models.BooleanField(default=True)
       
       def __str__(self):
           return self.nom
       
       class Meta:
           db_table = 'ma_table'
           ordering = ['nom']

Views (API)
~~~~~~~~~~~

.. code-block:: python

   class MonViewSet(viewsets.ModelViewSet):
       queryset = MonModel.objects.filter(actif=True)
       serializer_class = MonSerializer
       permission_classes = [permissions.IsAuthenticated]
       
       @action(detail=True, methods=['get'])
       def action_personnalisee(self, request, pk=None):
           obj = self.get_object()
           # Logique m√©tier
           return Response(data)

Tests
-----

.. code-block:: bash

   # Lancer tous les tests
   python manage.py test

   # Tests d'une app sp√©cifique
   python manage.py test academics

   # Tests avec couverture
   pip install coverage
   coverage run --source='.' manage.py test
   coverage report

Commandes personnalis√©es
------------------------

.. code-block:: bash

   # R√©initialiser les donn√©es
   python manage.py reset_medical_data --confirm

   # Nettoyer les donn√©es
   python manage.py cleanup_data --confirm

   # V√©rifier l'int√©grit√©
   python manage.py verify_data

   # G√©n√©rer la documentation
   python docs/generate_docs.py
'''
    
    # Changelog
    changelog_content = '''Changelog
=========

Version 1.0.0 (2024-12)
------------------------

Premi√®re version fonctionnelle d'AcadFlow pour facult√© de m√©decine.

Fonctionnalit√©s ajout√©es
~~~~~~~~~~~~~~~~~~~~~~~~

* **Gestion acad√©mique compl√®te**
  
  * Structure hi√©rarchique (Domaines ‚Üí Fili√®res ‚Üí Niveaux)
  * Organisation p√©dagogique (UE ‚Üí EC)
  * Gestion des classes et inscriptions

* **Syst√®me d'√©valuation**
  
  * Saisie des notes par √©valuation
  * Calcul automatique des moyennes (EC, UE, Semestre)
  * Configuration flexible des types d'√©valuation

* **Gestion des utilisateurs**
  
  * Authentification et profils
  * R√¥les : Admin, Enseignant, √âtudiant, Scolarit√©
  * Syst√®me de permissions

* **API REST compl√®te**
  
  * Endpoints pour toutes les entit√©s
  * Authentification par token
  * Documentation automatique

* **Interface d'administration**
  
  * Interface Django Admin personnalis√©e
  * Statistiques et tableaux de bord
  * Filtres et recherche avanc√©e

* **Outils de gestion**
  
  * Commandes de gestion personnalis√©es
  * Scripts d'initialisation de donn√©es
  * Outils de v√©rification et nettoyage

Donn√©es de test
~~~~~~~~~~~~~~~

* 50 √©tudiants en m√©decine (L1-L2)
* 5 enseignants sp√©cialis√©s
* Structure compl√®te UE/EC pour m√©decine
* Notes et moyennes g√©n√©r√©es automatiquement

Configuration
~~~~~~~~~~~~~

* Optimis√© pour facult√© de m√©decine
* Base de donn√©es PostgreSQL
* Support multilingue (fran√ßais)
* Timezone Africa/Douala
'''
    
    # Cr√©er les r√©pertoires
    (docs_dir / 'api').mkdir(exist_ok=True)
    (docs_dir / 'models').mkdir(exist_ok=True)
    (docs_dir / '_static').mkdir(exist_ok=True)
    (docs_dir / '_templates').mkdir(exist_ok=True)
    
    # √âcrire les fichiers
    files = {
        'index.rst': index_content,
        'installation.rst': installation_content,
        'quickstart.rst': quickstart_content,
        'development.rst': development_content,
        'changelog.rst': changelog_content,
    }
    
    for filename, content in files.items():
        with open(docs_dir / filename, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ {filename} cr√©√©")
    
    # Cr√©er la documentation API
    create_api_docs(docs_dir)
    
    # Cr√©er la documentation des mod√®les
    create_models_docs(docs_dir)

def create_api_docs(docs_dir):
    """Cr√©e la documentation de l'API"""
    api_index = '''API Reference
=============

.. toctree::
   :maxdepth: 2

   core
   academics
   users
   evaluations

Vue d'ensemble
--------------

L'API AcadFlow est une API REST qui suit les conventions de Django REST Framework.

Base URL
~~~~~~~~

.. code-block::

   http://localhost:8000/api/

Authentification
~~~~~~~~~~~~~~~~

L'API utilise l'authentification par token :

.. code-block:: http

   Authorization: Token your-token-here

Endpoints principaux
~~~~~~~~~~~~~~~~~~~~

* ``/api/core/`` - Structure de base (domaines, fili√®res)
* ``/api/academics/`` - Gestion acad√©mique (classes, UE, EC)
* ``/api/users/`` - Utilisateurs et profils
* ``/api/evaluations/`` - Notes et √©valuations
'''
    
    # API par app
    api_apps = {
        'core.rst': '''Core API
========

Domaines
--------

.. automodule:: core.views
   :members: DomaineViewSet

Fili√®res
--------

.. automodule:: core.views
   :members: FiliereViewSet

Niveaux
-------

.. automodule:: core.views
   :members: NiveauViewSet
''',
        'academics.rst': '''Academics API
=============

Classes
-------

.. automodule:: academics.views
   :members: ClasseViewSet

Unit√©s d'Enseignement
---------------------

.. automodule:: academics.views
   :members: UEViewSet

√âl√©ments Constitutifs
--------------------

.. automodule:: academics.views
   :members: ECViewSet
''',
        'users.rst': '''Users API
=========

Utilisateurs
------------

.. automodule:: users.views
   :members: UserViewSet

√âtudiants
---------

.. automodule:: users.views
   :members: EtudiantViewSet

Enseignants
-----------

.. automodule:: users.views
   :members: EnseignantViewSet
''',
        'evaluations.rst': '''Evaluations API
===============

√âvaluations
-----------

.. automodule:: evaluations.views
   :members: EvaluationViewSet

Notes
-----

.. automodule:: evaluations.views
   :members: NoteViewSet

Moyennes
--------

.. automodule:: evaluations.views
   :members: MoyenneUEViewSet
'''
    }
    
    with open(docs_dir / 'api' / 'index.rst', 'w', encoding='utf-8') as f:
        f.write(api_index)
    
    for filename, content in api_apps.items():
        with open(docs_dir / 'api' / filename, 'w', encoding='utf-8') as f:
            f.write(content)
    
    print("   ‚úÖ Documentation API cr√©√©e")

def create_models_docs(docs_dir):
    """Cr√©e la documentation des mod√®les"""
    models_index = '''Models Reference
================

.. toctree::
   :maxdepth: 2

   core
   academics
   users
   evaluations

Vue d'ensemble
--------------

Les mod√®les AcadFlow organisent les donn√©es selon une hi√©rarchie logique :

1. **Core** : Structure de base de l'√©tablissement
2. **Academics** : Organisation p√©dagogique
3. **Users** : Utilisateurs et profils
4. **Evaluations** : Syst√®me d'√©valuation
'''
    
    models_apps = {
        'core.rst': '''Core Models
===========

.. automodule:: core.models
   :members:
   :undoc-members:
   :show-inheritance:
''',
        'academics.rst': '''Academics Models
================

.. automodule:: academics.models
   :members:
   :undoc-members:
   :show-inheritance:
''',
        'users.rst': '''Users Models
============

.. automodule:: users.models
   :members:
   :undoc-members:
   :show-inheritance:
''',
        'evaluations.rst': '''Evaluations Models
=================

.. automodule:: evaluations.models
   :members:
   :undoc-members:
   :show-inheritance:
'''
    }
    
    with open(docs_dir / 'models' / 'index.rst', 'w', encoding='utf-8') as f:
        f.write(models_index)
    
    for filename, content in models_apps.items():
        with open(docs_dir / 'models' / filename, 'w', encoding='utf-8') as f:
            f.write(content)
    
    print("   ‚úÖ Documentation des mod√®les cr√©√©e")

def create_makefile(docs_dir):
    """Cr√©e le Makefile pour construire la documentation"""
    makefile_content = '''# Minimal makefile for Sphinx documentation

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD  ?= sphinx-build
SOURCEDIR    = .
BUILDDIR     = _build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
'''
    
    with open(docs_dir / 'Makefile', 'w', encoding='utf-8') as f:
        f.write(makefile_content)
    
    # Batch file pour Windows
    batch_content = '''@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=.
set BUILDDIR=_build

if "%1" == "" goto help

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd
'''
    
    with open(docs_dir / 'make.bat', 'w', encoding='utf-8') as f:
        f.write(batch_content)
    
    print("   ‚úÖ Makefile cr√©√©")

if __name__ == '__main__':
    setup_sphinx_docs()
    
    print("\n" + "="*60)
    print("üìö SPHINX CONFIGUR√â AVEC SUCC√àS!")
    print("="*60)
    print("\nüöÄ Commandes disponibles:")
    print("   cd docs")
    print("   make html      # G√©n√®re la documentation HTML")
    print("   make pdf       # G√©n√®re un PDF (si LaTeX install√©)")
    print("   make clean     # Nettoie les fichiers g√©n√©r√©s")
    print("\nüìÇ La documentation sera dans : docs/_build/html/")
    print("üåê Ouvrez : docs/_build/html/index.html")
    print("="*60)