# docs/generate_docs.py
"""
Script de g√©n√©ration automatique de documentation pour AcadFlow
G√©n√®re la documentation des mod√®les, API, et structure du projet
"""

import os
import sys
import django
import inspect
from datetime import datetime
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'acadflow_backend.settings')
django.setup()

from django.apps import apps
from django.db import models
from django.urls import get_resolver
from rest_framework import serializers, viewsets
from rest_framework.routers import DefaultRouter

class DocumentationGenerator:
    def __init__(self):
        self.docs_dir = Path('docs/auto_generated')
        self.docs_dir.mkdir(parents=True, exist_ok=True)
        
    def generate_all(self):
        """G√©n√®re toute la documentation"""
        print("üöÄ G√©n√©ration de la documentation compl√®te d'AcadFlow...")
        
        # 1. Documentation des mod√®les
        self.generate_models_documentation()
        
        # 2. Documentation de l'API
        self.generate_api_documentation()
        
        # 3. Structure du projet
        self.generate_project_structure()
        
        # 4. Guide d'utilisation
        self.generate_usage_guide()
        
        # 5. Sch√©ma de base de donn√©es
        self.generate_database_schema()
        
        # 6. Index principal
        self.generate_main_index()
        
        print("‚úÖ Documentation g√©n√©r√©e dans le dossier 'docs/auto_generated/'")
    
    def generate_models_documentation(self):
        """G√©n√®re la documentation des mod√®les Django"""
        print("üìä G√©n√©ration de la documentation des mod√®les...")
        
        content = [
            "# Documentation des Mod√®les",
            "=" * 50,
            f"G√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## Vue d'ensemble",
            "Cette documentation pr√©sente tous les mod√®les Django d'AcadFlow.",
            ""
        ]
        
        # Parcourir toutes les apps Django
        for app_config in apps.get_app_configs():
            if app_config.name in ['core', 'academics', 'users', 'evaluations']:
                content.extend(self._document_app_models(app_config))
        
        self._write_file('models.md', '\n'.join(content))
    
    def _document_app_models(self, app_config):
        """Documente les mod√®les d'une app"""
        content = [
            f"## App: {app_config.verbose_name} ({app_config.name})",
            "-" * 40,
            ""
        ]
        
        for model in app_config.get_models():
            content.extend(self._document_model(model))
            content.append("")
        
        return content
    
    def _document_model(self, model):
        """Documente un mod√®le sp√©cifique"""
        content = [
            f"### {model.__name__}",
            f"**Table:** `{model._meta.db_table}`",
            ""
        ]
        
        # Description du mod√®le
        if model.__doc__:
            content.append(f"**Description:** {model.__doc__.strip()}")
            content.append("")
        
        # Champs
        content.append("**Champs:**")
        content.append("")
        content.append("| Nom | Type | Options | Description |")
        content.append("|-----|------|---------|-------------|")
        
        for field in model._meta.get_fields():
            if hasattr(field, 'get_internal_type'):
                field_type = field.get_internal_type()
                options = []
                
                # Options du champ
                if hasattr(field, 'null') and field.null:
                    options.append("null=True")
                if hasattr(field, 'blank') and field.blank:
                    options.append("blank=True")
                if hasattr(field, 'unique') and field.unique:
                    options.append("unique=True")
                if hasattr(field, 'max_length') and field.max_length:
                    options.append(f"max_length={field.max_length}")
                if hasattr(field, 'default') and field.default != models.NOT_PROVIDED:
                    options.append(f"default={field.default}")
                
                # Relations
                if hasattr(field, 'related_model') and field.related_model:
                    options.append(f"‚Üí {field.related_model.__name__}")
                
                options_str = ", ".join(options) if options else "-"
                help_text = getattr(field, 'help_text', '') or '-'
                
                content.append(f"| `{field.name}` | {field_type} | {options_str} | {help_text} |")
        
        # M√©thodes importantes
        methods = [method for method in dir(model) if not method.startswith('_') and callable(getattr(model, method))]
        custom_methods = [m for m in methods if m not in ['objects', 'DoesNotExist', 'MultipleObjectsReturned']]
        
        if custom_methods:
            content.append("")
            content.append("**M√©thodes personnalis√©es:**")
            for method in custom_methods[:5]:  # Limiter √† 5 m√©thodes
                content.append(f"- `{method}()`")
        
        return content
    
    def generate_api_documentation(self):
        """G√©n√®re la documentation de l'API REST"""
        print("üîå G√©n√©ration de la documentation de l'API...")
        
        content = [
            "# Documentation de l'API REST",
            "=" * 50,
            f"G√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## Endpoints disponibles",
            ""
        ]
        
        # Documentation des ViewSets
        content.extend(self._document_viewsets())
        
        # Exemples d'utilisation
        content.extend(self._generate_api_examples())
        
        self._write_file('api.md', '\n'.join(content))
    
    def _document_viewsets(self):
        """Documente les ViewSets"""
        content = []
        
        # Mapper les apps et leurs ViewSets
        app_viewsets = {
            'core': ['DomaineViewSet', 'FiliereViewSet', 'NiveauViewSet'],
            'academics': ['ClasseViewSet', 'UEViewSet', 'ECViewSet'],
            'users': ['UserViewSet', 'EtudiantViewSet', 'EnseignantViewSet'],
            'evaluations': ['EvaluationViewSet', 'NoteViewSet']
        }
        
        for app_name, viewset_names in app_viewsets.items():
            content.append(f"### {app_name.capitalize()}")
            content.append("")
            
            try:
                app_module = __import__(f'{app_name}.views', fromlist=[''])
                
                for viewset_name in viewset_names:
                    if hasattr(app_module, viewset_name):
                        viewset_class = getattr(app_module, viewset_name)
                        content.extend(self._document_viewset(viewset_class, app_name))
                        
            except ImportError:
                content.append(f"*Module {app_name}.views non trouv√©*")
            
            content.append("")
        
        return content
    
    def _document_viewset(self, viewset_class, app_name):
        """Documente un ViewSet sp√©cifique"""
        content = [
            f"#### {viewset_class.__name__}",
            ""
        ]
        
        # URL de base
        model_name = viewset_class.__name__.replace('ViewSet', '').lower()
        base_url = f"/api/{app_name}/{model_name}s/"
        
        content.append(f"**URL de base:** `{base_url}`")
        content.append("")
        
        # Actions CRUD standards
        content.append("**Actions disponibles:**")
        content.append("")
        content.append("| M√©thode | URL | Description |")
        content.append("|---------|-----|-------------|")
        content.append(f"| GET | `{base_url}` | Liste tous les √©l√©ments |")
        content.append(f"| POST | `{base_url}` | Cr√©e un nouvel √©l√©ment |")
        content.append(f"| GET | `{base_url}{{id}}/` | R√©cup√®re un √©l√©ment |")
        content.append(f"| PUT | `{base_url}{{id}}/` | Met √† jour un √©l√©ment |")
        content.append(f"| DELETE | `{base_url}{{id}}/` | Supprime un √©l√©ment |")
        
        # Actions personnalis√©es
        custom_actions = []
        for method_name in dir(viewset_class):
            method = getattr(viewset_class, method_name)
            if hasattr(method, 'mapping') or hasattr(method, 'detail'):
                custom_actions.append(method_name)
        
        if custom_actions:
            content.append("")
            content.append("**Actions personnalis√©es:**")
            for action in custom_actions:
                content.append(f"- `{base_url}{{id}}/{action}/`")
        
        content.append("")
        return content
    
    def _generate_api_examples(self):
        """G√©n√®re des exemples d'utilisation de l'API"""
        return [
            "## Exemples d'utilisation",
            "",
            "### Authentification",
            "```bash",
            "# Login",
            "curl -X POST http://localhost:8000/api/auth/login/ \\",
            '  -H "Content-Type: application/json" \\',
            '  -d \'{"username": "admin", "password": "admin123"}\'',
            "",
            "# Utiliser le token",
            "curl -H \"Authorization: Token YOUR_TOKEN\" \\",
            "  http://localhost:8000/api/academics/classes/",
            "```",
            "",
            "### R√©cup√©ration de donn√©es",
            "```bash",
            "# Liste des classes",
            "GET /api/academics/classes/",
            "",
            "# D√©tails d'une classe",
            "GET /api/academics/classes/1/",
            "",
            "# √âtudiants d'une classe",
            "GET /api/academics/classes/1/etudiants/",
            "",
            "# Programme p√©dagogique d'une classe",
            "GET /api/academics/classes/1/programme_pedagogique/",
            "```",
            "",
            "### Filtrage",
            "```bash",
            "# Classes par fili√®re",
            "GET /api/academics/classes/?filiere=1",
            "",
            "# UE par niveau",
            "GET /api/academics/ues/?niveau=1",
            "",
            "# Notes d'un √©tudiant",
            "GET /api/evaluations/notes/?etudiant=1&session=1",
            "```"
        ]
    
    def generate_project_structure(self):
        """G√©n√®re la documentation de la structure du projet"""
        print("üìÅ G√©n√©ration de la structure du projet...")
        
        content = [
            "# Structure du Projet AcadFlow",
            "=" * 50,
            f"G√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## Architecture g√©n√©rale",
            "",
            "AcadFlow suit l'architecture MVT (Model-View-Template) de Django avec une API REST.",
            "",
            "```",
            "acadflow_backend/",
            "‚îú‚îÄ‚îÄ acadflow_backend/          # Configuration principale",
            "‚îÇ   ‚îú‚îÄ‚îÄ settings.py            # Param√®tres Django",
            "‚îÇ   ‚îú‚îÄ‚îÄ urls.py                # URLs principales",
            "‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py                # Interface WSGI",
            "‚îú‚îÄ‚îÄ core/                      # App principale (domaines, fili√®res)",
            "‚îÇ   ‚îú‚îÄ‚îÄ models.py              # Mod√®les de base",
            "‚îÇ   ‚îú‚îÄ‚îÄ views.py               # Vues API",
            "‚îÇ   ‚îú‚îÄ‚îÄ serializers.py        # S√©rialiseurs",
            "‚îÇ   ‚îî‚îÄ‚îÄ admin.py               # Interface admin",
            "‚îú‚îÄ‚îÄ academics/                 # Gestion acad√©mique",
            "‚îÇ   ‚îú‚îÄ‚îÄ models.py              # UE, EC, Classes",
            "‚îÇ   ‚îú‚îÄ‚îÄ views.py               # API acad√©mique",
            "‚îÇ   ‚îî‚îÄ‚îÄ management/commands/   # Commandes personnalis√©es",
            "‚îú‚îÄ‚îÄ users/                     # Gestion des utilisateurs",
            "‚îÇ   ‚îú‚îÄ‚îÄ models.py              # Utilisateurs, √âtudiants, Enseignants",
            "‚îÇ   ‚îî‚îÄ‚îÄ views.py               # Authentification, profils",
            "‚îî‚îÄ‚îÄ evaluations/               # Syst√®me d'√©valuation",
            "    ‚îú‚îÄ‚îÄ models.py              # Notes, Moyennes",
            "    ‚îî‚îÄ‚îÄ views.py               # API √©valuations",
            "```",
            ""
        ]
        
        # Documentation des apps
        content.extend(self._document_apps())
        
        self._write_file('structure.md', '\n'.join(content))
    
    def _document_apps(self):
        """Documente chaque app du projet"""
        content = [
            "## Description des Applications",
            ""
        ]
        
        apps_description = {
            'core': {
                'description': 'Application principale contenant les mod√®les de base de la structure acad√©mique.',
                'models': ['Domaine', 'Cycle', 'TypeFormation', 'Filiere', 'Option', 'Niveau'],
                'role': 'D√©finit la structure hi√©rarchique de l\'√©tablissement'
            },
            'academics': {
                'description': 'Gestion de la structure acad√©mique (ann√©es, classes, UE, EC).',
                'models': ['AnneeAcademique', 'Session', 'Semestre', 'Classe', 'UE', 'EC'],
                'role': 'Organisation des enseignements et de la structure p√©dagogique'
            },
            'users': {
                'description': 'Gestion des utilisateurs et de leurs profils.',
                'models': ['User', 'Enseignant', 'Etudiant', 'Inscription', 'StatutEtudiant'],
                'role': 'Authentification et gestion des profils utilisateurs'
            },
            'evaluations': {
                'description': 'Syst√®me d\'√©valuation et de calcul des moyennes.',
                'models': ['Enseignement', 'Evaluation', 'Note', 'MoyenneEC', 'MoyenneUE'],
                'role': 'Gestion des notes, √©valuations et calcul des moyennes'
            }
        }
        
        for app_name, info in apps_description.items():
            content.extend([
                f"### {app_name.capitalize()}",
                "",
                f"**Description:** {info['description']}",
                "",
                f"**R√¥le:** {info['role']}",
                "",
                "**Mod√®les principaux:**",
                ""
            ])
            
            for model in info['models']:
                content.append(f"- `{model}`")
            
            content.append("")
        
        return content
    
    def generate_database_schema(self):
        """G√©n√®re le sch√©ma de base de donn√©es"""
        print("üóÑÔ∏è G√©n√©ration du sch√©ma de base de donn√©es...")
        
        content = [
            "# Sch√©ma de Base de Donn√©es",
            "=" * 50,
            f"G√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## Relations entre les mod√®les",
            "",
            "```mermaid",
            "erDiagram",
            "    DOMAINE ||--o{ FILIERE : contains",
            "    CYCLE ||--o{ NIVEAU : contains",
            "    CYCLE ||--o{ TYPE_FORMATION : contains",
            "    FILIERE ||--o{ OPTION : has",
            "    FILIERE ||--o{ CLASSE : organizes",
            "    NIVEAU ||--o{ CLASSE : groups",
            "    NIVEAU ||--o{ UE : teaches",
            "    UE ||--o{ EC : contains",
            "    CLASSE ||--o{ INSCRIPTION : enrolls",
            "    USER ||--o{ ETUDIANT : extends",
            "    USER ||--o{ ENSEIGNANT : extends",
            "    ETUDIANT ||--o{ INSCRIPTION : has",
            "    ENSEIGNANT ||--o{ ENSEIGNEMENT : teaches",
            "    EC ||--o{ ENSEIGNEMENT : assigned_to",
            "    ENSEIGNEMENT ||--o{ EVALUATION : creates",
            "    EVALUATION ||--o{ NOTE : generates",
            "    ETUDIANT ||--o{ NOTE : receives",
            "```",
            "",
            "## Tables principales",
            ""
        ]
        
        # Documenter les tables importantes
        important_models = [
            ('core', ['Domaine', 'Filiere', 'Niveau']),
            ('academics', ['Classe', 'UE', 'EC']),
            ('users', ['User', 'Etudiant', 'Inscription']),
            ('evaluations', ['Evaluation', 'Note', 'MoyenneUE'])
        ]
        
        for app_name, model_names in important_models:
            try:
                app_models = apps.get_app_config(app_name).get_models()
                for model in app_models:
                    if model.__name__ in model_names:
                        content.extend(self._document_table(model))
            except:
                pass
        
        self._write_file('database.md', '\n'.join(content))
    
    def _document_table(self, model):
        """Documente une table de base de donn√©es"""
        content = [
            f"### {model._meta.db_table}",
            f"**Mod√®le:** {model.__name__}",
            "",
            "| Colonne | Type | Contraintes |",
            "|---------|------|-------------|"
        ]
        
        for field in model._meta.get_fields():
            if hasattr(field, 'get_internal_type'):
                constraints = []
                if hasattr(field, 'primary_key') and field.primary_key:
                    constraints.append("PRIMARY KEY")
                if hasattr(field, 'unique') and field.unique:
                    constraints.append("UNIQUE")
                if hasattr(field, 'null') and not field.null:
                    constraints.append("NOT NULL")
                if hasattr(field, 'related_model') and field.related_model:
                    constraints.append(f"FK ‚Üí {field.related_model._meta.db_table}")
                
                content.append(f"| {field.name} | {field.get_internal_type()} | {', '.join(constraints) or '-'} |")
        
        content.append("")
        return content
    
    def generate_usage_guide(self):
        """G√©n√®re un guide d'utilisation"""
        print("üìñ G√©n√©ration du guide d'utilisation...")
        
        content = [
            "# Guide d'Utilisation d'AcadFlow",
            "=" * 50,
            f"G√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## Installation et d√©marrage",
            "",
            "### Pr√©requis",
            "- Python 3.8+",
            "- PostgreSQL 12+",
            "- Django 5.2+",
            "",
            "### Installation",
            "```bash",
            "# Cloner le projet",
            "git clone <repo_url>",
            "cd acadflow_backend",
            "",
            "# Installer les d√©pendances",
            "pip install -r requirements.txt",
            "",
            "# Configuration de la base de donn√©es",
            "python manage.py migrate",
            "",
            "# Initialiser les donn√©es de test",
            "python manage.py reset_medical_data --confirm",
            "",
            "# D√©marrer le serveur",
            "python manage.py runserver",
            "```",
            "",
            "## Utilisation de l'interface admin",
            "",
            "1. Acc√©dez √† `http://localhost:8000/admin/`",
            "2. Connectez-vous avec : `admin` / `admin123`",
            "3. Naviguez dans les diff√©rentes sections",
            "",
            "## Utilisation de l'API",
            "",
            "### Authentification",
            "```python",
            "import requests",
            "",
            "# Login",
            "response = requests.post('http://localhost:8000/api/auth/login/', {",
            "    'username': 'admin',",
            "    'password': 'admin123'",
            "})",
            "token = response.json()['token']",
            "",
            "# Utiliser le token",
            "headers = {'Authorization': f'Token {token}'}",
            "response = requests.get('http://localhost:8000/api/academics/classes/', headers=headers)",
            "```",
            "",
            "### Exemples d'op√©rations courantes",
            "",
            "#### R√©cup√©rer la liste des √©tudiants d'une classe",
            "```python",
            "classe_id = 1",
            "response = requests.get(",
            "    f'http://localhost:8000/api/academics/classes/{classe_id}/etudiants/',",
            "    headers=headers",
            ")",
            "etudiants = response.json()",
            "```",
            "",
            "#### Saisir des notes",
            "```python",
            "evaluation_id = 1",
            "notes_data = {",
            "    'notes': [",
            "        {'etudiant_id': 1, 'note_obtenue': 15.5},",
            "        {'etudiant_id': 2, 'note_obtenue': 12.0, 'absent': False}",
            "    ]",
            "}",
            "response = requests.post(",
            "    f'http://localhost:8000/api/evaluations/evaluations/{evaluation_id}/saisir_notes/',",
            "    json=notes_data,",
            "    headers=headers",
            ")",
            "```",
            "",
            "## Commandes de gestion",
            "",
            "### Donn√©es de test",
            "```bash",
            "# Initialiser les donn√©es compl√®tes",
            "python manage.py reset_medical_data --confirm",
            "",
            "# Nettoyer les donn√©es",
            "python manage.py cleanup_data --confirm",
            "",
            "# V√©rifier l'int√©grit√©",
            "python manage.py verify_data",
            "```",
            "",
            "### Calcul des moyennes",
            "```bash",
            "# Recalculer toutes les moyennes",
            "python manage.py recalculer_moyennes --classe=1 --session=1",
            "```"
        ]
        
        self._write_file('usage.md', '\n'.join(content))
    
    def generate_main_index(self):
        """G√©n√®re l'index principal de la documentation"""
        print("üìã G√©n√©ration de l'index principal...")
        
        content = [
            "# Documentation AcadFlow",
            "=" * 50,
            f"Documentation g√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            "",
            "## üéØ Vue d'ensemble",
            "",
            "AcadFlow est un syst√®me de gestion acad√©mique d√©velopp√© avec Django.",
            "Il permet la gestion compl√®te d'une institution √©ducative :",
            "",
            "- üìö **Gestion acad√©mique** : UE, EC, classes, programmes",
            "- üë• **Gestion des utilisateurs** : √©tudiants, enseignants, administration",
            "- üìù **√âvaluations** : notes, moyennes, relev√©s",
            "- üîå **API REST** : int√©gration avec d'autres syst√®mes",
            "",
            "## üìñ Documentation disponible",
            "",
            "### üèóÔ∏è Architecture et d√©veloppement",
            "- [üìä **Mod√®les de donn√©es**](models.md) - Structure des donn√©es et relations",
            "- [üîå **API REST**](api.md) - Endpoints et utilisation de l'API",
            "- [üìÅ **Structure du projet**](structure.md) - Organisation du code",
            "- [üóÑÔ∏è **Sch√©ma de base de donn√©es**](database.md) - Relations et tables",
            "",
            "### üöÄ Utilisation",
            "- [üìñ **Guide d'utilisation**](usage.md) - Installation et utilisation",
            "",
            "## üéì Contexte : Facult√© de M√©decine",
            "",
            "Cette instance d'AcadFlow est configur√©e pour une facult√© de m√©decine avec :",
            "",
            "### üè• Structure acad√©mique",
            "- **Domaine** : Sciences de la Sant√©",
            "- **Fili√®res** : M√©decine, Pharmacie, Dentaire, Kin√©sith√©rapie, etc.",
            "- **Niveaux** : L1, L2, L3, M1, M2",
            "- **UE typiques** : Anatomie, Physiologie, Biochimie, Pathologie",
            "",
            "### üë• Utilisateurs types",
            "- **Administrateurs** : Gestion compl√®te du syst√®me",
            "- **Service Scolarit√©** : Inscriptions, planning, r√©sultats",
            "- **Enseignants** : Saisie des notes, gestion des √©valuations",
            "- **√âtudiants** : Consultation des notes et relev√©s",
            "",
            "### üìä Donn√©es de test incluses",
            "- 50 √©tudiants r√©partis en 4 classes",
            "- 5 enseignants sp√©cialis√©s",
            "- UE et EC pour L1 et L2 m√©decine",
            "- √âvaluations et notes g√©n√©r√©es",
            "- Moyennes calcul√©es automatiquement",
            "",
            "## üîë Acc√®s rapide",
            "",
            "### Comptes de test",
            "| Type | Login | Password | R√¥le |",
            "|------|-------|----------|------|",
            "| Admin | `admin` | `admin123` | Administration compl√®te |",
            "| Enseignant | `ens001` | `ens123` | Prof. Jean-Claude MBALLA |",
            "| √âtudiant | `med0001` | `etud123` | √âtudiant en L1 |",
            "",
            "### URLs importantes",
            "- **Interface Admin** : http://localhost:8000/admin/",
            "- **API Root** : http://localhost:8000/api/",
            "- **Login API** : http://localhost:8000/api/auth/login/",
            "",
            "## üõ†Ô∏è Commandes utiles",
            "",
            "```bash",
            "# D√©marrer le serveur",
            "python manage.py runserver",
            "",
            "# R√©initialiser les donn√©es de test",
            "python manage.py reset_medical_data --confirm",
            "",
            "# V√©rifier l'int√©grit√© des donn√©es",
            "python manage.py verify_data",
            "",
            "# G√©n√©rer cette documentation",
            "python docs/generate_docs.py",
            "```",
            "",
            "## üìû Support",
            "",
            "Pour toute question technique :",
            "1. Consultez d'abord cette documentation",
            "2. V√©rifiez les logs : `python manage.py check`",
            "3. Utilisez les commandes de diagnostic int√©gr√©es",
            "",
            "---",
            "",
            f"*Documentation g√©n√©r√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}*",
            "",
            "*Pour mettre √† jour cette documentation, ex√©cutez : `python docs/generate_docs.py`*"
        ]
        
        self._write_file('README.md', '\n'.join(content))
    
    def _write_file(self, filename, content):
        """√âcrit le contenu dans un fichier"""
        filepath = self.docs_dir / filename
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ {filename} g√©n√©r√©")

# Script principal
if __name__ == '__main__':
    generator = DocumentationGenerator()
    generator.generate_all()
    
    print("\n" + "="*60)
    print("üìö DOCUMENTATION G√âN√âR√âE AVEC SUCC√àS!")
    print("="*60)
    print("\nüìÇ Fichiers cr√©√©s dans 'docs/auto_generated/':")
    print("   ‚Ä¢ README.md - Index principal")
    print("   ‚Ä¢ models.md - Documentation des mod√®les")
    print("   ‚Ä¢ api.md - Documentation de l'API")
    print("   ‚Ä¢ structure.md - Structure du projet")
    print("   ‚Ä¢ database.md - Sch√©ma de base de donn√©es")
    print("   ‚Ä¢ usage.md - Guide d'utilisation")
    print("\nüåê Consultez README.md pour commencer!")
    print("="*60)